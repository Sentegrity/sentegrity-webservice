<?php

namespace Sentegrity\BusinessBundle\Entity\Repository;

use Sentegrity\BusinessBundle\Entity\Documents\Policy;

/**
 * PolicyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PolicyRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get policy from database by uuid
     * @param $uuid
     * @return Policy;
     */
    public function getByUuid($uuid)
    {
        return $this->findOneBy(array(
                'uuid' => $uuid
            ));
    }

    /**
     * Get all policies of an organization
     * @param $id -> organization owner id
     * @param $offset
     * @param $limit
     * @return array
     */
    public function getByOrganization($id, $offset, $limit)
    {
        // along an organization id system should use 0 as default
        // policies should also be returned
        $criteria = [0, $id];
        return $this->findBy(array(
            'organizationOwnerId' => $criteria
        ), null, $limit, $offset);
    }

    /**
     * Gets the default policy for given platform/organization combination
     * @param $platform
     * @param $organizationId
     * @param $appVersion
     * @return Policy
     */
    public function getDefaultPolicyByPlatformAndOrganization($platform, $organizationId, $appVersion)
    {
        return $this->findBy(array(
            'platform' => $platform,
            'isDefault' => 1,
            'organizationOwnerId' => $organizationId,
            'appVersion' => $appVersion
        ));
    }

    /**
     * Get all policies (if sentegrity is asking)
     * @param $offset
     * @param $limit
     * @return array
     */
    public function getAll($offset, $limit)
    {
        return $this->findBy(
            [], null, $limit, $offset
        );
    }

    /**
     * Delete all policies of certain organization
     * @param $id
     */
    public function deleteByOrganization($id)
    {
        $existing = $this->findBy(array(
            'organizationOwnerId' => $id
        ));

        foreach ($existing as $record) {
            $this->getEntityManager()->remove($record);
        }

        $this->getEntityManager()->flush();
    }

    /**
     * Counts all policies
     * @param $id
     * @return int
     */
    public function countPolicies($id = "")
    {
        $qb = $this->createQueryBuilder('policy')
            ->select('COUNT(policy.id)');

        if ($id) {
            $qb->where('policy.organizationOwnerId IN(:id)')->setParameter('id', [$id, 0]);
        }

        return (int)$qb->getQuery()->getSingleScalarResult();
    }
}
